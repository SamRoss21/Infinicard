Initial Classes to Implement:

- Bar
- Image
- Text
- Button
- Stack

Bar Parameters:
Key? key, Widget? leading, bool automaticallyImplyLeading = true, 
Widget? title, List<Widget>? actions, Widget? flexibleSpace, 
PreferredSizeWidget? bottom, double? elevation, 
double? scrolledUnderElevation, ScrollNotificationPredicate 
notificationPredicate = defaultScrollNotificationPredicate, 
Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, 
Color? backgroundColor, Color? foregroundColor, IconThemeData? iconTheme, 
IconThemeData? actionsIconTheme, bool primary = true, bool? centerTitle, 
bool excludeHeaderSemantics = false, double? titleSpacing, double toolbarOpacity = 1.0, 
double bottomOpacity = 1.0, double? toolbarHeight, double? leadingWidth, 
TextStyle? toolbarTextStyle, TextStyle? titleTextStyle, 
SystemUiOverlayStyle? systemOverlayStyle, bool forceMaterialTransparency = false, 
Clip? clipBehavior

Bar Parameters We Will Wrap:
- Widget? leading
- Widget? title
- List<Widget>? actions
- PreferredSizeWidget? bottom
- Color? backgroundColor
- bool? centerTitle
- double? toolbarHeight
- double? leadingWidth
- TextStyle? titleTextStyle

Image Parameters:
Key? key, required ImageProvider<Object> image, ImageFrameBuilder? frameBuilder, 
ImageLoadingBuilder? loadingBuilder, ImageErrorWidgetBuilder? errorBuilder, 
String? semanticLabel, bool excludeFromSemantics = false, double? width, 
double? height, Color? color, Animation<double>? opacity, BlendMode? colorBlendMode, 
BoxFit? fit, AlignmentGeometry alignment = Alignment.center, 
ImageRepeat repeat = ImageRepeat.noRepeat, Rect? centerSlice, 
bool matchTextDirection = false, bool gaplessPlayback = false, 
bool isAntiAlias = false, FilterQuality filterQuality = FilterQuality.low

Example Call: return const Image(image: AssetImage('assets/background.png'));

Image Parameters We Will Wrap:
- ImageProvider<Object> image
- double? width
- double? height
- String? semanticLabel

Text Parameters:
String data, {Key? key, TextStyle? style, StrutStyle? strutStyle, 
TextAlign? textAlign, TextDirection? textDirection, Locale? locale, 
bool? softWrap, TextOverflow? overflow, TextScaler? textScaler, int? maxLines, 
String? semanticsLabel, TextWidthBasis? textWidthBasis, 
TextHeightBehavior? textHeightBehavior, Color? selectionColor

Text Parameters We Will Wrap:
- String data
- TextStyle? style
- TextAlign? textAlign

TextButton Paramters:
{Key? key, required VoidCallback? onPressed, VoidCallback? onLongPress, 
ValueChanged<bool>? onHover, ValueChanged<bool>? onFocusChange, ButtonStyle? style, 
FocusNode? focusNode, bool autofocus = false, Clip clipBehavior = Clip.none, 
MaterialStatesController? statesController, bool? isSemanticButton = true, 
required Widget child

TextButton Parameters We Will Wrap:
- ButtonStyle? style
- Widget child

Stack Paramters:
Key? key, AlignmentGeometry alignment = AlignmentDirectional.topStart, 
TextDirection? textDirection, StackFit fit = StackFit.loose, 
Clip clipBehavior = Clip.hardEdge, List<Widget> children = const <Widget>[]

Stack Parameters We Will Wrap:
- List<Widget> children

TextStyle Parameters:
bool inherit = true, Color? color, Color? backgroundColor, double? fontSize, 
FontWeight? fontWeight, FontStyle? fontStyle, double? letterSpacing, double? wordSpacing, 
TextBaseline? textBaseline, double? height, TextLeadingDistribution? leadingDistribution, 
Locale? locale, Paint? foreground, Paint? background, List<Shadow>? shadows, 
List<FontFeature>? fontFeatures, List<FontVariation>? fontVariations, TextDecoration? decoration, 
Color? decorationColor, TextDecorationStyle? decorationStyle, double? decorationThickness, 
String? debugLabel, String? fontFamily, List<String>? fontFamilyFallback, String? package, 
TextOverflow? overflow

TextStyle Parameters We Will Wrap:
- Color? color
- double? fontSize
- FontWeight? fontWeight
- FontStyle? fontStyle

All Widgets to Wrap:
- Appbar
- TextStyle
- Image
- Text
- TextAlign
- TextButton
- ButtonStyle

Naming Scheme: 
infinicard + class name = infinicard wrapped class

Wrap Skeleton:
import 'package:flutter/material.dart';

class InfinicardTextStyle extends StatefulWidget {
  final Map params;

  final List<String> argNames = [];

  var args = Map();
  var defaults = Map(); //our default arguments

  InfinicardTextStyle(this.params){
        //get null values for parameters
    for(var arg in argNames){
      args[arg] = null; 
    }

    //override our/flutter's default values when user specifies
    for(var key in params.keys){
      if(args.containsKey(key)){
        args[key] = params[key]; 
      }
    }
  }

@override
  _InfinicardTextStyleState createState() => _InfinicardTextStyleState();

}

class _InfinicardTextStyleState extends State<InfinicardTextStyle> {
  @override
  Widget build(BuildContext context) {

    return TextStyle{}
  }
}